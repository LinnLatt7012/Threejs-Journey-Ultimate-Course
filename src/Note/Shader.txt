shaderfic -> IOS shader -> glsl-function
Kronos Group registery -> OpenGL documentation 
Book for shaders Glossy -> greate course about fragment shader thebookofshaders.com/glossary
gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0)

//playing around
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;

attribute float aRandom;
attribute vec3 position;

varying float vRandom;

void main(){
    vec4 modelPosition = modelMatrix * vec4(position, 1.0);
    modelPosition.z += aRandom*0.1;
    vec4 viewPosition = viewMatrix * modelPosition;
    vec4 projectedPosition = projectionMatrix * viewPosition;

    gl_Position = projectedPosition;
    vRandom= aRandom;
}
precision mediump float;

varying float vRandom;
void main(){
    gl_FragColor = vec4(0.5,vRandom,1.0,vRandom);
}

========================================================================
raw shader
=======================================================================
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec2 uFrequency;
uniform float uTime;

attribute vec3 position;
attribute vec2 uv;

varying vec2 vUv;
varying float vElevation;
void main(){
    vec4 modelPosition = modelMatrix * vec4(position, 1.0);

    float elevation = sin(modelPosition.x * uFrequency.x-uTime) *0.1;
    elevation += sin(modelPosition.y * uFrequency.y-uTime) *0.1;
    modelPosition.z += elevation;
    vec4 viewPosition = viewMatrix * modelPosition;
    vec4 projectedPosition = projectionMatrix * viewPosition;

    gl_Position = projectedPosition;

    vUv =uv;
    vElevation = elevation;
}



precision mediump float;

uniform vec3 uColor;
uniform sampler2D uTexture;

varying vec2 vUv;
varying float vElevation;
void main(){
    vec4 textureColor = texture2D(uTexture,vUv);
    textureColor.rgb *= vElevation * 2.0 + 0.65;
    // gl_FragColor = vec4(uColor,1.0);
    gl_FragColor = textureColor;
}

========================================
glsl noise